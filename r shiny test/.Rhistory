geom_line() +
labs(title = paste0("Line Plot of ", input$y_var, " by Date for ", input$region))
})
}
# Run the application
shinyApp(ui = ui, server = server)
setwd('C:/work/projects/r shiny test')
Sys.setenv("LANGUAGE"="En")
Sys.setlocale("LC_ALL", "English")
#-------------------------Package Installer--------------------------
# load packages and install if missing
# thanks to Richard Schwinn for the code, http://stackoverflow.com/a/33876492
# list the packages you need
p <- c("tidyverse", 'sf', 'purrr','readxl', 'data.table', 'tictoc',
'beepr','readr','lubridate', 'ggthemes', 'scales', 'extrafont', 'dplyr',
'zoo', 'shiny','bslib', 'plotly', 'shinythemes', 'tmap')
# this is a package loading function
# this is a package loading function
loadpacks <- function(package.list = p){
new.packages <- package.list[!(package.list %in% installed.packages()[,'Package'])]
if(length(new.packages)) {
install.packages(new.packages, Ncpus = parallel::detectCores(), type = "binary")
}
lapply(eval(package.list), require, character.only = TRUE)
}
loadpacks(p) # calling function to load and/or install packages
rm(loadpacks, p) # cleanup namespace
# Load shapefile for country boundaries
countries <- st_read("world-administrative-boundaries/world-administrative-boundaries.shp")
# Define UI
ui <- fluidPage(
titlePanel("Line and Map Plot Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("y_var", label = "Select Y-axis variable:", choices = names(df)),
selectInput("region", label = "Select Country Region:", choices = unique(df$Country_Region))
),
mainPanel(
plotOutput("line_plot"),
leafletOutput("map_plot")
)
)
)
runApp()
runApp()
setwd('C:/work/projects/r shiny test')
Sys.setenv("LANGUAGE"="En")
Sys.setlocale("LC_ALL", "English")
#-------------------------Package Installer--------------------------
# load packages and install if missing
# thanks to Richard Schwinn for the code, http://stackoverflow.com/a/33876492
# list the packages you need
p <- c("tidyverse", 'sf', 'purrr','readxl', 'data.table', 'tictoc',
'beepr','readr','lubridate', 'ggthemes', 'scales', 'extrafont', 'dplyr',
'zoo', 'shiny','bslib', 'plotly', 'shinythemes', 'tmap', 'leaflet')
# this is a package loading function
# this is a package loading function
loadpacks <- function(package.list = p){
new.packages <- package.list[!(package.list %in% installed.packages()[,'Package'])]
if(length(new.packages)) {
install.packages(new.packages, Ncpus = parallel::detectCores(), type = "binary")
}
lapply(eval(package.list), require, character.only = TRUE)
}
loadpacks(p) # calling function to load and/or install packages
rm(loadpacks, p) # cleanup namespace
#----------------------End of Package Installer----------------------
# Load shapefile for country boundaries
countries <- st_read("world-administrative-boundaries/world-administrative-boundaries.shp")
# Define UI
ui <- fluidPage(
titlePanel("Line and Map Plot Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("y_var", label = "Select Y-axis variable:", choices = names(df)),
selectInput("region", label = "Select Country Region:", choices = unique(df$Country_Region))
),
mainPanel(
plotOutput("line_plot"),
leafletOutput("map_plot")
)
)
)
# Define server
server <- function(input, output) {
# Filter data based on user input
data <- reactive({
df %>%
filter(Country_Region == input$region)
})
# Create line plot
output$line_plot <- renderPlot({
ggplot(data(), aes(x = Date, y = !!sym(input$y_var))) +
geom_line() +
labs(title = paste0("Line Plot of ", input$y_var, " by Date for ", input$region))
})
# Create map plot
output$map_plot <- renderLeaflet({
# Filter shapefile for selected country
selected_country <- countries %>%
filter(name == input$region)
# Create map with highlighted country
tm_shape(countries) +
tm_polygons() +
tm_shape(selected_country) +
tm_polygons(col = "red", alpha = 0.5) +
tm_layout(legend.position = c("left", "bottom"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load shapefile for country boundaries
countries <- st_read("world-administrative-boundaries/world-administrative-boundaries.shp")
# Define UI
ui <- fluidPage(
titlePanel("Line and Map Plot Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("y_var", label = "Select Y-axis variable:", choices = names(df)),
selectInput("region", label = "Select Country Region:", choices = unique(df$Country_Region))
),
mainPanel(
plotOutput("line_plot"),
leafletOutput("map_plot")
)
)
)
# Define server
server <- function(input, output) {
# Filter data based on user input
data <- reactive({
df %>%
filter(Country_Region == input$region)
})
# Create line plot
output$line_plot <- renderPlot({
ggplot(data(), aes(x = Date, y = !!sym(input$y_var))) +
geom_line() +
labs(title = paste0("Line Plot of ", input$y_var, " by Date for ", input$region))
})
# Create map plot
output$map_plot <- renderLeaflet({
# Filter shapefile for selected country
selected_country <- countries %>%
filter(name == input$region)
# Create map with highlighted country
tm_shape(countries) +
tm_polygons() +
tm_shape(selected_country) +
tm_polygons(col = "red", alpha = 0.5) +
tm_layout(legend.position = c("left", "bottom"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
View(countries)
setwd('C:/work/projects/r shiny test')
Sys.setenv("LANGUAGE"="En")
Sys.setlocale("LC_ALL", "English")
#-------------------------Package Installer--------------------------
# load packages and install if missing
# thanks to Richard Schwinn for the code, http://stackoverflow.com/a/33876492
# list the packages you need
p <- c("tidyverse", 'sf', 'purrr','readxl', 'data.table', 'tictoc',
'beepr','readr','lubridate', 'ggthemes', 'scales', 'extrafont', 'dplyr',
'zoo', 'shiny','bslib', 'plotly', 'shinythemes', 'tmap', 'leaflet')
# this is a package loading function
# this is a package loading function
loadpacks <- function(package.list = p){
new.packages <- package.list[!(package.list %in% installed.packages()[,'Package'])]
if(length(new.packages)) {
install.packages(new.packages, Ncpus = parallel::detectCores(), type = "binary")
}
lapply(eval(package.list), require, character.only = TRUE)
}
loadpacks(p) # calling function to load and/or install packages
rm(loadpacks, p) # cleanup namespace
#----------------------End of Package Installer----------------------
# The dataset of our study contains daily & cumulative number of COVID-19 tests conducted, number of positive, hospitalized, recovered & death cases reported by country. In details here are the columns in the dataset:
#
# Date: Date
# Continent_Name: Continent names
# Two_Letter_Country_Code: Country codes
# Country_Region: Country names
# Province_State: States/province names; value is All States when state/provincial level data is not available
# positive: Cumulative number of positive cases reported.
# active: Number of actively cases on that day.
# hospitalized: Cumulative number of hospitalized cases reported.
# hospitalizedCurr: Number of actively hospitalized cases on that day.
# recovered: Cumulative number of recovered cases reported.
# death: Cumulative number of deaths reported.
# total_tested: Cumulative number of tests conducted.
# daily_tested: Number of tests conducted on the day; if daily data is unavailable, daily tested is averaged across number of days in between.
# daily_positive: Number of positive cases reported on the day; if daily data is unavailable, daily positive is averaged across number of days in.
#reading data
df = fread('covid19.csv')
df = df %>%
filter(Province_State=='All States')
df_grouped_date = df %>%
group_by(Date) %>%
summarise(total_tested=sum(total_tested))
df_grouped_date$Date = ymd(df_grouped_date$Date)
# Load shapefile for country boundaries
countries <- st_read("world-administrative-boundaries/world-administrative-boundaries.shp")
# Define UI
ui <- fluidPage(
titlePanel("Line and Map Plot Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("y_var", label = "Select Y-axis variable:", choices = names(df)),
selectInput("region", label = "Select Country Region:", choices = unique(df$Country_Region))
),
mainPanel(
plotOutput("line_plot"),
leafletOutput("map_plot")
)
)
)
# Define server
server <- function(input, output) {
# Filter data based on user input
data <- reactive({
df %>%
filter(Country_Region == input$region)
})
# Create line plot
output$line_plot <- renderPlot({
ggplot(data(), aes(x = Date, y = !!sym(input$y_var))) +
geom_line() +
labs(title = paste0("Line Plot of ", input$y_var, " by Date for ", input$region))
})
# Create map plot
output$map_plot <- renderLeaflet({
# Filter shapefile for selected country
selected_country <- countries %>%
filter(name == input$region)
# Create map with highlighted country
tm_shape(countries) +
tm_polygons() +
tm_shape(selected_country) +
tm_polygons(col = "red", alpha = 0.5) +
tm_layout(legend.position = c("left", "bottom"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(leaflet)
library(tmap)
# Load shapefile for country boundaries
countries <- st_read("world-administrative-boundaries/world-administrative-boundaries.shp")
ui <- fluidPage(
titlePanel("My Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("y_var", "Select Y-Axis Variable", choices = colnames(data)),
selectInput("country", "Select Country Region", choices = unique(data$Country_Region))
),
mainPanel(
plotOutput("line_plot"),
leafletOutput("map_plot")
)
)
)
# Load shapefile for country boundaries
countries <- st_read("world-administrative-boundaries/world-administrative-boundaries.shp")
ui <- fluidPage(
titlePanel("My Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("y_var", "Select Y-Axis Variable", choices = colnames(df)),
selectInput("country", "Select Country Region", choices = unique(df$Country_Region))
),
mainPanel(
plotOutput("line_plot"),
leafletOutput("map_plot")
)
)
)
server <- function(input, output) {
# Filter data based on selected country
filtered_data <- reactive({
data %>%
filter(Country_Region == input$country)
})
# Create line plot
output$line_plot <- renderPlot({
ggplot(filtered_data(), aes(x = Date, y = !!sym(input$y_var))) +
geom_line()
})
# Create map plot
output$map_plot <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addMarkers(lng = ~Long_, lat = ~Lat, popup = ~Country_Region)
})
}
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
titlePanel("Line and Map Plot Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("y_var", label = "Select Y-axis variable:", choices = names(df)),
selectInput("region", label = "Select Country Region:", choices = unique(df$Country_Region))
),
mainPanel(
plotOutput("line_plot"),
leafletOutput("map_plot")
)
)
)
# Define server
server <- function(input, output) {
# Filter data based on user input
data <- reactive({
df %>%
filter(Country_Region == input$region)
})
# Create line plot
output$line_plot <- renderPlot({
ggplot(data(), aes(x = Date, y = !!sym(input$y_var))) +
geom_line() +
labs(title = paste0("Line Plot of ", input$y_var, " by Date for ", input$region))
})
# Create map plot
output$map_plot <- renderLeaflet({
# Filter shapefile for selected country
selected_country <- countries %>%
filter(name == input$region)
# Create map with highlighted country
tm_shape(countries) +
tm_polygons() +
tm_shape(selected_country) +
tm_polygons(col = "red", alpha = 0.5) +
tm_layout(legend.position = c("left", "bottom"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
titlePanel("Line and Map Plot Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("y_var", label = "Select Y-axis variable:", choices = names(df)),
selectInput("region", label = "Select Country Region:", choices = countrylist)
),
mainPanel(
plotOutput("line_plot"),
leafletOutput("map_plot")
)
)
)
# country list for selectInput
countrylist <- sort(unique(df$Country_Region))
# Define UI
ui <- fluidPage(
titlePanel("Line and Map Plot Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("y_var", label = "Select Y-axis variable:", choices = names(df)),
selectInput("region", label = "Select Country Region:", choices = countrylist)
),
mainPanel(
plotOutput("line_plot"),
leafletOutput("map_plot")
)
)
)
# Define server
server <- function(input, output) {
# Filter data based on user input
data <- reactive({
df %>%
filter(Country_Region == input$region)
})
# Create line plot
output$line_plot <- renderPlot({
ggplot(data(), aes(x = Date, y = !!sym(input$y_var))) +
geom_line() +
labs(title = paste0("Line Plot of ", input$y_var, " by Date for ", input$region))
})
# Create map plot
output$map_plot <- renderLeaflet({
# Filter shapefile for selected country
selected_country <- countries %>%
filter(name == input$region)
# Create map with highlighted country
tm_shape(countries) +
tm_polygons() +
tm_shape(selected_country) +
tm_polygons(col = "red", alpha = 0.5) +
tm_layout(legend.position = c("left", "bottom"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# y-axis columns
columns_yaxis = c('positive','active','hospitalized','hospitalizedCurr','recovered','death','total_tested','daily_tested','daily_positive')
# Define UI
ui <- fluidPage(
titlePanel("Line and Map Plot Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("y_var", label = "Select Y-axis variable:", choices = columns_yaxis),
selectInput("region", label = "Select Country Region:", choices = countrylist)
),
mainPanel(
plotOutput("line_plot"),
leafletOutput("map_plot")
)
)
)
# Define server
server <- function(input, output) {
# Filter data based on user input
data <- reactive({
df %>%
filter(Country_Region == input$region)
})
# Create line plot
output$line_plot <- renderPlot({
ggplot(data(), aes(x = Date, y = !!sym(input$y_var))) +
geom_line() +
labs(title = paste0("Line Plot of ", input$y_var, " by Date for ", input$region))
})
# Create map plot
output$map_plot <- renderLeaflet({
# Filter shapefile for selected country
selected_country <- countries %>%
filter(name == input$region)
# Create map with highlighted country
tm_shape(countries) +
tm_polygons() +
tm_shape(selected_country) +
tm_polygons(col = "red", alpha = 0.5) +
tm_layout(legend.position = c("left", "bottom"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#reading data
df = fread('owid-covid-data.csv')
View(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
glimpse(df)
runApp()
runApp()
runApp()
runApp()
#-------------------------Package Installer--------------------------
# load packages and install if missing
# thanks to Richard Schwinn for the code, http://stackoverflow.com/a/33876492
# list the packages you need
p <- c("tidyverse", 'sf', 'purrr','readxl', 'data.table', 'tictoc',
'beepr','readr','lubridate', 'ggthemes', 'scales', 'extrafont', 'dplyr',
'zoo', 'shiny','bslib', 'plotly', 'shinythemes', 'tmap', 'leaflet', 'extrafont')
# this is a package loading function
# this is a package loading function
loadpacks <- function(package.list = p){
new.packages <- package.list[!(package.list %in% installed.packages()[,'Package'])]
if(length(new.packages)) {
install.packages(new.packages, Ncpus = parallel::detectCores(), type = "binary")
}
lapply(eval(package.list), require, character.only = TRUE)
}
loadpacks(p) # calling function to load and/or install packages
rm(loadpacks, p) # cleanup namespace
font_import()
loadfonts(device="win")
fonts()
font_import()
setwd('C:/work/projects/r shiny test')
Sys.setenv("LANGUAGE"="En")
Sys.setlocale("LC_ALL", "English")
#-------------------------Package Installer--------------------------
# load packages and install if missing
# thanks to Richard Schwinn for the code, http://stackoverflow.com/a/33876492
# list the packages you need
p <- c("tidyverse", 'sf', 'purrr','readxl', 'data.table', 'tictoc',
'beepr','readr','lubridate', 'ggthemes', 'scales', 'extrafont', 'dplyr',
'zoo', 'shiny','bslib', 'plotly', 'shinythemes', 'tmap', 'leaflet', 'extrafont', 'showtext')
# this is a package loading function
# this is a package loading function
loadpacks <- function(package.list = p){
new.packages <- package.list[!(package.list %in% installed.packages()[,'Package'])]
if(length(new.packages)) {
install.packages(new.packages, Ncpus = parallel::detectCores(), type = "binary")
}
lapply(eval(package.list), require, character.only = TRUE)
}
loadpacks(p) # calling function to load and/or install packages
rm(loadpacks, p) # cleanup namespace
#----------------------End of Package Installer----------------------
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Roboto", "roboto")
## Automatically use showtext to render text
showtext_auto()
runApp()
runApp()
